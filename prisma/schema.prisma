// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  title         String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  projects      Project[] @relation("Owner")
  comments      Comment[]
  memberProjects Project[] @relation("ProjectMembers")
  isInternal    Boolean @default(false)
  invites       Invite[] @relation("fromUser")
  receiveComments   Boolean @default(true)
  receiveMarketing  Boolean @default(true)
  files         File[]
  hasSeenWelcomeModal Boolean @default(false)
}

model Invite {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  fromUser      User      @relation("fromUser", fields: [fromUserId], references: [id])
  fromUserId    String
  toEmail       String?    
  project       Project   @relation("project", fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

model Project {
  id            String    @id @default(cuid())
  name          String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
  user          User      @relation("Owner", fields: [userId], references: [id])
  userId        String
  content       Json?
  comments      Comment[]
  published     Boolean   @default(true)
  members       User[]    @relation("ProjectMembers")
  cover         String?
  invites       Invite[] @relation("project")
  files         File[]
}

model Comment {
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String
  id           String    @id @default(cuid())
  content      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String?
  message   String?
  path      String?
  type      String?
}


model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name      String?
  label     String?
  emoji     String?   @default("File")
  url       String
  size      Int?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
  moduleId  String?
}


